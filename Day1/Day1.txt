CODING PRACTICE :

DATE : 23.7.24

LEETCODE : --------------------------------------------------------------------------------------------------

PROBLEM 1 (Medium) -------------------------------------------------------------------------------------------
LC P.NO : 7

Reverse Integer :

Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

Example 1:
Input: x = 123
Output: 321

Example 2:
Input: x = -123
Output: -321

Example 3:
Input: x = 120
Output: 21

SOLUTION :
class Solution {
public:
    int reverse(int x) 
    {
        long reversed = 0;
        while (x != 0) 
        {
            int digit = x % 10;
            x /= 10;

            if (reversed == 0 && digit == 0) 
            {
                continue;
            }
            reversed = reversed * 10 + digit;
        }
        if(reversed >INT_MAX || reversed <INT_MIN) 
        {
            return 0;
        }
        return reversed;
    }
};

PROBLEM 2 (Easy) ------------------------------------------------------------------------------------------------------------
LC P.NO : 7

Palindrome Number :

Given an integer x, return true if x is a palindrome, and false otherwise.

Example 1:
Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.

Example 2:
Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.

Example 3:
Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.

SOLUTION :
class Solution {
public:
    bool isPalindrome(int x) {
        long og = x;
        long reversed = 0;
        if(x<0)
        {
            return false;
        }
        while (x != 0) 
        {
            int digit = x % 10;
            x /= 10;

            if (reversed == 0 && digit == 0) 
            {
                continue;
            }
            reversed = reversed * 10 + digit;
        }
        if(reversed == og)
        {
            return true;
        }
        else if(reversed >INT_MAX || reversed <INT_MIN) 
        {
            return 0;
        }
        else 
        {
            return false;
        }
    }
};

PROBLEM 3 (Easy) ------------------------------------------------------------------------------------------------------------
LC P.NO : 35

Search Insert Position : 

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4

SOLUTION :
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) 
    {
        long pos;
        int flag=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==target)
            {
                flag=1;
                pos = i;
                break;
            }
        }    
        if(flag==0)
        {
            for(int i=0;i<nums.size();i++)
            {
                if(nums[i]>target)
                {
                    pos = i;
                    break;
                }
            }
        }
        return pos;
    }
};

CODECHEF : ---------------------------------------------------------------------------------------------------

PROBLEM 1 -------------------------------------------------------------------------------------------

ATM Machine

Input
2
5 10
3 5 3 2 1
4 6
10 8 6 4
Output
11010
0010

Example case 1: The ATM machine initially contains 10 units of money. The first person comes and withdraws 3 units, so the amount remaining in the machine is 7. Then the second person withdraws 5 units and the remaining amount is 2. The third person wants to withdraw 3 units, but since there are only 2 units of money in the machine, it throws an error and the third person must leave without getting anything. Then the fourth person withdraws 2 units, which leaves nothing in the machine, so the last person does not get anything.

SOLUTION :
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int num,amount;
        cin>>num>>amount;
        int a[num];
        for(int i=0;i<num;i++)
        {
            cin>>a[i];
        }
        for(int i=0;i<num;i++)
        {
            if(amount >= a[i])
            {
                amount = amount - a[i];
                cout<<1;
            }
            else if(amount < a[i])
            {
                cout<<0;
            }
        }
        cout<<endl;
    }
}

PROBLEM 2 -------------------------------------------------------------------------------------------

Apples and oranges
Rushitote went to a programming contest to distribute apples and oranges to the contestants.
He has N apples and M oranges, which need to be divided equally amongst the contestants. Find the maximum possible number of contestants such that:
Every contestant gets an equal number of apples; and
Every contestant gets an equal number of oranges.
Note that every fruit with Rushitote must be distributed, there cannot be any left over.

For example, 2 apples and 4 oranges can be distributed equally to two contestants, where each one receives 1 apple and 2 oranges.
However, 2 apples and 5 oranges can only be distributed equally to one contestant.

Input
3
1 5
2 4
4 6
Output
1
2
2

SOLUTIOIN :

#include <iostream> 
using namespace std;
long long gcd(long long int a, long long int b)
{
  if (b == 0)
    return a;
  return gcd(b, a % b);
}

int main()
{
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int a,o;
        cin>>a>>o;
        long ans = gcd(a,o);
        cout<<ans<<endl;
    }
}

PROBLEM 3 -------------------------------------------------------------------------------------------

Input
3
2 5
6 3
2 10
Output
1
3
2

SOLUTION :

#include <iostream> 
using namespace std;
long long gcd(long long int a, long long int b)
{
  if (b == 0)
    return a;
  return gcd(b, a % b);
}

int main()
{
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        int a,o;
        cin>>a>>o;
        long ans = gcd(a,o);
        cout<<ans<<endl;
    }
}
